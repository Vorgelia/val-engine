#version 430
#pragma include Shaders/Base/Data/SurfaceInclude.veinc
#pragma include Shaders/Base/Data/ComputeInclude.veinc
#pragma include Shaders/Base/Data/UtilityInclude.veinc

layout (local_size_x = 1024) in;

void main() 
{		
	uint index = gl_GlobalInvocationID.x;
	
	vec4 data = ve_commonVec4Data[index];
	if(dot(data.zw,data.zw) < 0.01f)
	{
		data.zw = 
			vec2(
				ve_rand(index * ve_worldTime.y*100) * 2 - 1,
				ve_rand(ve_worldTime.y*25.2+index)
			)*300;
	}
	else
	{
		bool collision = false;
		
		if((data.y < 0 && data.w < 0)
		 ||(data.y > ve_screen.y && data.w > 0))
		{
			data.w = -data.w;
			collision = true;
		}
		
		if((data.x < 0 && data.z < 0)
		 ||(data.x > ve_screen.x && data.z > 0))
		{
			data.z = -data.z;
			collision = true;
		}
		
		if(collision)
		{
			data.zw *= 0.15 + ve_rand(sin(ve_worldTime.x+index));
		}
		
		data.w -= 100.0f * VE_FRAME_TIME;
	}

	data.xy += data.zw * VE_FRAME_TIME;
	
	data += vec4(
			 ve_rand(vec2(index, 0))
			,ve_rand(vec2(index*2, 0))
			,0
			,0) 
		*100 * VE_FRAME_TIME;
	
	ve_commonVec4Data[index] = data;
	
	ivec2 pos = ivec2(data.xy);
	
	vec4 tex = vec4(1, 1, 1, 1);
	for(int i = -1 ; i < 1; ++i)
		for(int j = 0 ; j < 3; ++j)
		{
			ivec2 mpos = pos + ivec2(i,j);
			mpos.x = clamp(mpos.x, 0, 1920);
			mpos.y = clamp(mpos.y, 0, 1080);
			imageStore(mainBuf_tex0, pos+ivec2(i,j), tex);
		}
}