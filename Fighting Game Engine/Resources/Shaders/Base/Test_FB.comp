#version 430
#pragma include Shaders/Base/Data/SurfaceInclude.veinc
#pragma include Shaders/Base/Data/ComputeInclude.veinc
#pragma include Shaders/Base/Data/UtilityInclude.veinc

layout (local_size_x = 1024) in;

void main() 
{
	if(ve_worldTime.x < 10)
		return;
		
	uint index = gl_GlobalInvocationID.x;

	vec4 data = ve_commonVec4Data[index];
	if(dot(data.zw,data.zw) < 0.00001f)
	{
		data.zw = vec2(
			ve_rand(vec2(index,0)),
			ve_rand(vec2(index*2,0)))*300;
	}
	else if(data.y < 0 && data.w < 0)
	{
		data.w = -data.w;
		data.zw *= 0.3;
	}
	else
	{
		data.w -= 100.0f * VE_FRAME_TIME;
		data.z -= data.z * 0.2 * VE_FRAME_TIME;
	}
	
	data.xy += data.zw * VE_FRAME_TIME;
	
	data += vec4(
			 ve_rand(vec2(index, 0))
			,ve_rand(vec2(index*2, 0))
			,0
			,0) 
		*100 * VE_FRAME_TIME;
	
	ve_commonVec4Data[index] = data;
	
	ivec2 pos = ivec2(data.xy);
	if(pos.x<0 || pos.x > ve_screen.x || pos.y < 0 || pos.y > ve_screen.y)
	{
		return;
	}
	
	//debugCube(index);
	
	vec4 tex = vec4(1, 1, 1, 1);
	imageStore(mainBuf_tex0, pos, tex);
}