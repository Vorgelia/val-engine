#pragma Bind Debug
#pragma Bind Time
#pragma Bind Array
#pragma Bind Map
#pragma Bind Math

//This function runs every frame
function GameUpdate() : void
	
end

function EpsilonEquality(dec lhs, dec rhs) : bool
	return ve_math_abs(lhs - rhs) < 0.000005
end

//This function runs once when the script is loaded
function Init() : void
	ve_assert(ve_math_abs(-100) == 100, "math abs")
	ve_assert(ve_math_floor(10.1252516) == 10, "math floor")
	ve_assert(ve_math_ceil(10.000001) == 11, "math ceil")
	ve_assert(ve_math_round(10.66666666666666) == 11, "math round")
	
	ve_assert(EpsilonEquality(ve_math_sin(0), 0), "math sin")
	ve_assert(EpsilonEquality(ve_math_cos(0), 1), "math cos")
	
	ve_assert(EpsilonEquality(ve_math_pow(10, 2), 100), "math pow")
	ve_assert(EpsilonEquality(ve_math_pow(100, 0.5), 10), "math pow < 1")
	ve_assert(EpsilonEquality(ve_math_sqrt(100), 10), "math sqrt")
	ve_assert(EpsilonEquality(ve_math_rsqrt(100), 1/10), "math rsqrt")
	
	map testCollection
	ve_map_add(testCollection, "test", 333)
	ve_assert(testCollection["test"] == 333, "map insert")
	testCollection["test"] = 999
	ve_assert(testCollection["test"] == 999, "map edit")

	array arrrrr
	ve_array_push(arrrrr, 100.23492)
	ve_assert(ve_array_size(arrrrr) == 1 && arrrrr[0] == 100.23492, "array insert")
	ve_assert((arrrrr[0] = 2) == 2, "array edit")
	ve_array_pop(arrrrr)
	ve_assert(ve_array_size(arrrrr) == 0, "array pop")
	
	ve_assert((2*2+3) == 7, "operation order")
	ve_assert(!(7 != 7) && (!(!true)), "logical operators")
	
	ve_assert(JustReturn666() == 666, "function return values")
	
	bool switchRangeSuccessful = false
	bool switchFallthroughSuccessful = false
	switch(4)
		case (-5)->(5)
		  switchRangeSuccessful = true
		case 0->666
		  switchFallthroughSuccessful = true
	end
	
	ve_assert(switchRangeSuccessful, "ranged switch")
	ve_assert(switchFallthroughSuccessful, "switch fallthrough")
	
	bool switchValueSuccessful = false
	switch(4.23)
		case 4.23
		  switchValueSuccessful = true
		  break
	end
	
	ve_assert(switchFallthroughSuccessful, "exact switch case")
	
	dec k=0
	while(k<5)
		k = k+1
		continue
		j=666666
	end
	
	ve_assert(k == 5, "control flow")
	
	return
	
	ve_assert(false, "control flow part 2")
end

function JustReturn666() : dec
	return 666
end
